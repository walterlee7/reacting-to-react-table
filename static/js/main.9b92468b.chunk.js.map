{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["FoldableTable","FoldableTableHOC","ReactTable","TreeTable","TreeTableHOC","SelectTable","SelectTableHOC","App","data","name","age","id","time","columns","Header","headerClassName","accessor","react_default","a","createElement","es","defaultPageSize","pageSizeOptions","style","textAlign","SubComponent","row","original","console","log","backgroundColor","padding","getTrProps","state","rowInfo","column","background","foldable","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b92468b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactTable from \"react-table\";\nimport FoldableTableHOC from \"react-table/lib/hoc/foldableTable\";\nimport TreeTableHOC from \"react-table/lib/hoc/treeTable\";\nimport SelectTableHOC from \"react-table/lib/hoc/selectTable\";\nimport './App.css';\n//import \"react-table/react-table.css\";\n\nconst FoldableTable = FoldableTableHOC(ReactTable);\nconst TreeTable = TreeTableHOC(ReactTable);\nconst SelectTable = SelectTableHOC(ReactTable);\n\nclass App extends Component {\n\n    render() {\n        const data = [{\n            name: 'Roy Agasthyan',\n            age: 26,\n            id: 0,\n        }, {\n            name: 'Sam Thomason',\n            age: 22,\n            id: 1,\n        }, {\n            name: 'Michael Jackson',\n            age: 36\n        }, {\n            name: 'Samuel Roy',\n            age: 56,\n            time: 1200,\n        }, {\n            name: 'Rima Soy',\n            age: 28\n        }, {\n            name: 'Suzi Eliamma',\n            age: 28\n        }]\n\n        const data2 = [{\n            name: 'Roy Rogers',\n            age: 26,\n            id: 0,\n        }, {\n            name: 'Sam Adams',\n            age: 22,\n            id: 1,\n        }, {\n            name: 'Jack Daniels',\n            age: 36\n        }]\n\n        const columns = [{\n            Header: 'Reacting to react-table',\n            headerClassName: 'react-table-header-group',\n            columns: [\n                {\n                    Header: 'Name',\n                    accessor: 'name'\n                },\n                {\n                    Header: 'Age',\n                    accessor: 'age'\n                },\n                {\n                    Header: 'ID',\n                    accessor: 'id'\n                },\n                {\n                    Header: 'Time',\n                    accessor: 'time'\n                },\n            ]\n        }]\n\n        return (\n            <div>\n                <ReactTable\n                    data={data}\n                    columns={columns}\n                    defaultPageSize={3}\n                    pageSizeOptions={[3, 6]}\n                />\n\n                <ReactTable\n                    style={{ textAlign: 'center' }}\n                    data={data}\n                    columns={columns}\n                    defaultPageSize={3}\n                    pageSizeOptions={[3, 6]}\n                    SubComponent={row => {\n                        return (\n                            <div>\n                                {row.original.name}\n                                <br /> <br />\n                                {row.original.age}\n                                {console.log(row)}\n                            </div>\n                        )\n                    }}\n                />\n\n                <div id=\"data-2\">\n                    <ReactTable\n                        data={data2}\n                        columns={columns}\n                        defaultPageSize={3}\n                        pageSizeOptions={[3, 6]}\n                    />\n                </div>\n\n                <ReactTable\n                    style={{ backgroundColor: '#F01001', padding: 100 }}\n                    data={data}\n                    columns={columns}\n                    defaultPageSize={3}\n                    pageSizeOptions={[3, 6]}\n                />\n\n                <ReactTable\n                    getTrProps={(state, rowInfo, column) => {\n                        return {\n                            style: {\n                                background: rowInfo.row.age > 30 ? 'green' : 'red'\n                            }\n                        }\n                    }}\n                    data={data}\n                    columns={columns}\n                    defaultPageSize={3}\n                    pageSizeOptions={[3, 6]}\n                />\n\n                <div id=\"table\">\n                    <ReactTable\n                        data={data}\n                        columns={columns}\n                        defaultPageSize={4}\n                        pageSizeOptions={[3, 6]}\n                    />\n                </div>\n\n                <div id=\"title\">Foldable Table</div>\n                <FoldableTable\n                    data={data}\n                    columns={[{\n                        Header: \"Name\",\n                        foldable: true,\n                        columns: [{\n                            Header: 'Name',\n                            accessor: 'name'\n                        },\n                        {\n                            Header: 'Age',\n                            accessor: 'age'\n                        },]\n                    }, {\n                        Header: \"Info\",\n                        foldable: true,\n                        columns: [{\n                            Header: 'ID',\n                            accessor: 'id'\n                        },\n                        {\n                            Header: 'Time',\n                            accessor: 'time'\n                        }]\n                    }]\n                    }\n                />\n\n                <div id=\"title\">Tree Table</div>\n                <TreeTable\n                    data={data}\n                    columns={[{\n                        Header: \"Name\",\n                        foldable: true,\n                        columns: [{\n                            Header: 'Name',\n                            accessor: 'name'\n                        },\n                        {\n                            Header: 'Age',\n                            accessor: 'age'\n                        },]\n                    }, {\n                        Header: \"Info\",\n                        foldable: true,\n                        columns: [{\n                            Header: 'ID',\n                            accessor: 'id'\n                        },\n                        {\n                            Header: 'Time',\n                            accessor: 'time'\n                        }]\n                    }]\n                    }\n                />\n\n                <div id=\"title\">Select Table</div>\n                <SelectTable\n                    data={data}\n                    columns={[{\n                        Header: \"Name\",\n                        foldable: true,\n                        columns: [{\n                            Header: 'Name',\n                            accessor: 'name'\n                        },\n                        {\n                            Header: 'Age',\n                            accessor: 'age'\n                        },]\n                    }, {\n                        Header: \"Info\",\n                        foldable: true,\n                        columns: [{\n                            Header: 'ID',\n                            accessor: 'id'\n                        },\n                        {\n                            Header: 'Time',\n                            accessor: 'time'\n                        }]\n                    }]\n                    }\n                />\n\n            </div>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}